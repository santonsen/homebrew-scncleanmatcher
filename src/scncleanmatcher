#!/usr/bin/env python

import sys, os, re
import difflib
import argparse
from termcolor import cprint

class CleanMatcher():

    def __init__(self):
        self.hidden = False

        # coloured print
        self.green_print = '\033[1;32m{0}\033[1;m'
        self.normal_print = '\033[0;37m{0}\033[1;m'

        # get the user input
        args = self._parser()

        # get project(s)
        projects  = args.projects
        self.paths = self._getPaths(projects)
        # get the match_string
        self.match_string = args.matchstring

        # set debug or not
        self.debug = args.debug

        # do the matching
        self.getMatches()


    def setMatchString(self, match_string):
        self.match_string = match_string

    def getMatchString(self):
        return self.match_string

    def setPath(self, path):
        self.paths = path

    def getPath(self):
        return self.paths

    def setHidden(self,hidden):
        if type(hidden) == bool:
            self.hidden = hidden
        else:
            raise Exception("setHidden requires a bool value")

    def getHidden(self):
        return self.hidden

    def getMatches(self):
        # this can take either a list of paths or a single path
        if type(self.paths) == list:
            for path in self.paths:
                print '--------------------' * 4
                print 'Searching: %s' % path
                matches = self._getClnMatches(\
                                              self._getAllFiles(path,
                                                                self.hidden),
                                              self._getClnFiles(path,
                                                                self.match_string,
                                                                self.hidden),
                                              self.match_string,
                                              self.debug)
        elif type(self.paths) == str:
            matches = self._getClnMatches(\
                                          self._getAllFiles(self.paths,
                                                            self.hidden),
                                          self._getClnFiles(self.paths,
                                                            self.match_string,
                                                            self.hidden),
                                          self.match_string,
                                          self.debug)
        return matches


    def _getPaths(self,projects):
        paths = []
        for project in projects:
            if os.path.exists(os.path.join(project,'mastering/prores')):
                paths.append( str(os.path.join(project, 'mastering/prores')))
            else:
                raise Exception('could not find mastering/prores in supplied %s' % project)
        return paths


    def _parser(self):
        parser = argparse.ArgumentParser(prog='scncleanmatcher',
                                         description='A script that scrapes through folder(s) ' + \
                                         'and fuzzy matches files based on a string.')
        parser.add_argument('projects', help='Target project(s)',
                            nargs='+',
                            metavar='FOLDER')
        parser.add_argument('-m', '--matchstring',
                            help='Specify a match string.\nDefault is "_CLN_"'+\
                            'The match string is case insensitive. ',
                            default='_CLN_',
                            metavar='STRING')
        parser.add_argument('-d', '--debug', help='Turn on debugging',
                            action='store_true')
        if len(sys.argv) > 1:
            args = parser.parse_args()
        else:
            print '\nscncleanmatcher: ERROR: too few arguments\n'
            parser.print_help()
            sys.exit(0)

        return args


    def _getAllFiles(self, path, hidden=False):
        files = []
        for (dirpath, dirnames, filenames) in os.walk(path):
            if hidden:
                files.extend(filenames)
            else:
                filenames = [f for f in filenames if not f[0] == '.']
                dirnames[:] = [d for d in dirnames if not d[0] == '.']
                files.extend(filenames)
        if files == []:
            raise Exception('No files in %s' % path)
        else:
            return files


    def _getClnFiles(self, path, match_string, hidden=False):
        files = []
        cln_files = []
        for (dirpath, dirnames, filenames) in os.walk(path):
            if hidden:
                files.extend(filenames)
            else:
                filenames = [x for x in filenames if not x[0] == '.']
                dirnames[:] = [d for d in dirnames if not d[0] == '.']
                files.extend(filenames)

        for filename in files:
            # case insensitive search for match_string
            search_result = re.search(match_string, filename, re.I)
            # if _cln_ is found, add it to cln_files
            if search_result != None:
                cln_files.append(filename)

        return cln_files


    def _getClnMatches(self, files, cln_files, match_string, debug=False):
        matches = []
        # split the clean and normal files
        dirty_files = []

        for f in files:
            if f not in cln_files:
                dirty_files.append(f)
        if debug:
            print "\ndirty files: %s\n" % dirty_files
            print 'clean files: %s\n' % cln_files

        print self.normal_print.format('--------------------' * 4)
        for dirty_file in dirty_files:
            match = None
            for cln_file in cln_files:
                clean_part = re.search(match_string, cln_file, re.I).group()
                wildcard_string = '.*'.join(['_','_'])
                formatted_string = re.sub(clean_part, wildcard_string, cln_file)
                if '_mute_' in cln_file:
                    formatted_string = re.sub('_mute_', wildcard_string, formatted_string)
                regex = re.compile(formatted_string)
                search_result = regex.search(dirty_file)
                if search_result != None:
                    match = cln_file
                    cln_files.remove(cln_file)

            match_print = "%s -->> %s" % (dirty_file, match)
            if match != None:
                print self.green_print.format(match_print)
            else:
                print self.normal_print.format(match_print)

            matches.append([f, match])

        print self.normal_print.format('--------------------' * 4)

        return matches

if __name__ == '__main__':
    scncleanmatcher = CleanMatcher()
